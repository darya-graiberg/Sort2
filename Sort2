public class InsertionSort {    // сортирвка вставками
    public static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        // Для небольшого массива
        int[] smallArr = {64, 34, 25, 12, 22, 11, 90};
        System.out.println("Заданный массив:");
        for (int i = 0; i < smallArr.length; i++) {
            System.out.print(smallArr[i] + " ");
        }
        System.out.println(" ");
        long startTime = System.currentTimeMillis();
        insertionSort(smallArr);
        long endTime = System.currentTimeMillis();
        System.out.println("Время выполнения для небольшого массива: " + (endTime - startTime) + " мс");    // 0 миллисекунд
        System.out.println("Отсортированный массив:");  
        for (int i = 0; i < smallArr.length; i++) {
            System.out.print(smallArr[i] + " ");    // выводит 11 12 22 25 34 64 90  
        }
        System.out.println(" ");
        // Для крупного массива
        int[] largeArr = new int[10000];
        for (int i = 0; i < largeArr.length; i++) {
            largeArr[i] = (int) (Math.random() * 100);
        }
        startTime = System.currentTimeMillis();
        insertionSort(largeArr);
        endTime = System.currentTimeMillis();
        System.out.println("Время выполнения для крупного массива: " + (endTime - startTime) + " мс");    // 24 миллисекунды
        // можно сделать вывод, что сортирвка вставками идет быстрее
    }
}
